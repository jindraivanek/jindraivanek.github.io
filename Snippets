<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en-us">

  Compilation errors found: Unhandled exception "Object reference not set to an instance of an object." occured. StackTrace:    at Fue.ValueCompiler.comp@76-3.Invoke(Return v)
   at Fue.Rop.op_GreaterGreaterEqualsGreater@76.Invoke(a x)
   at Fue.Rop.catch[a](FSharpFunc`2 func),Unhandled exception "Object reference not set to an instance of an object." occured. StackTrace:    at Fue.ValueCompiler.comp@76-3.Invoke(Return v)
   at Fue.Rop.op_GreaterGreaterEqualsGreater@76.Invoke(a x)
   at Fue.Rop.catch[a](FSharpFunc`2 func),

  <body>

    Compilation errors found: Unhandled exception "The given key was not present in the dictionary." occured. StackTrace:    at Microsoft.FSharp.Collections.MapTreeModule.find[TValue,a](IComparer`1 comparer, TValue k, MapTree`2 m)
   at Fue.ValueCompiler.deepSearch(FSharpMap`2 data, String name, FSharpList`1 props)
   at Fue.ValueCompiler.search(FSharpMap`2 data, String key)
   at Fue.ValueCompiler.comp@71(FSharpMap`2 data, TemplateValue v)
   at Fue.Rop.catch[a](FSharpFunc`2 func),

    <div class="content container">
      <div class="posts">
        <div class="post">
          <h1>Memoize recursive</h1>
<table class="pre"><tr><td class="lines"><pre class="fssnip"><span class="l">1: </span>
<span class="l">2: </span>
<span class="l">3: </span>
<span class="l">4: </span>
<span class="l">5: </span>
<span class="l">6: </span>
<span class="l">7: </span>
</pre></td>
<td class="snippet"><pre class="fssnip highlighted"><code lang="fsharp"><span class="k">let</span> <span onmouseout="hideTip(event, 'fs1', 1)" onmouseover="showTip(event, 'fs1', 1)" class="f">memoize</span> (<span onmouseout="hideTip(event, 'fs2', 2)" onmouseover="showTip(event, 'fs2', 2)" class="f">f</span><span class="o">:</span> <span class="o">&#39;</span><span class="i">a</span> <span class="k">-&gt;</span> <span class="o">&#39;</span><span class="i">b</span>) <span class="o">=</span>
    <span class="k">let</span> <span onmouseout="hideTip(event, 'fs3', 3)" onmouseover="showTip(event, 'fs3', 3)" class="i">cache</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs4', 4)" onmouseover="showTip(event, 'fs4', 4)" class="i">System</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs5', 5)" onmouseover="showTip(event, 'fs5', 5)" class="i">Collections</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs6', 6)" onmouseover="showTip(event, 'fs6', 6)" class="i">Concurrent</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs7', 7)" onmouseover="showTip(event, 'fs7', 7)" class="t">ConcurrentDictionary</span><span class="o">&lt;</span>_, _<span class="o">&gt;</span>(<span onmouseout="hideTip(event, 'fs8', 8)" onmouseover="showTip(event, 'fs8', 8)" class="t">HashIdentity</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs9', 9)" onmouseover="showTip(event, 'fs9', 9)" class="i">Structural</span>)
    <span class="k">fun</span> <span onmouseout="hideTip(event, 'fs10', 10)" onmouseover="showTip(event, 'fs10', 10)" class="i">x</span> <span class="k">-&gt;</span>
        <span onmouseout="hideTip(event, 'fs3', 11)" onmouseover="showTip(event, 'fs3', 11)" class="i">cache</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs11', 12)" onmouseover="showTip(event, 'fs11', 12)" class="f">GetOrAdd</span>(<span onmouseout="hideTip(event, 'fs10', 13)" onmouseover="showTip(event, 'fs10', 13)" class="i">x</span>, <span class="k">lazy</span> (<span onmouseout="hideTip(event, 'fs2', 14)" onmouseover="showTip(event, 'fs2', 14)" class="f">f</span> <span onmouseout="hideTip(event, 'fs10', 15)" onmouseover="showTip(event, 'fs10', 15)" class="i">x</span>))<span class="o">.</span><span class="f">Force</span>()

<span class="c">// This works, but emit warning: This and other recursive references to the object(s) being defined will be checked for initialization-soundness at runtime through the use of a delayed reference.</span>
<span class="k">let</span> <span class="k">rec</span> <span onmouseout="hideTip(event, 'fs12', 16)" onmouseover="showTip(event, 'fs12', 16)" class="f">fib&#39;</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs1', 17)" onmouseover="showTip(event, 'fs1', 17)" class="f">memoize</span> <span class="o">&lt;|</span> <span class="k">fun</span> <span onmouseout="hideTip(event, 'fs13', 18)" onmouseover="showTip(event, 'fs13', 18)" class="i">n</span> <span class="k">-&gt;</span> <span class="k">if</span> <span onmouseout="hideTip(event, 'fs13', 19)" onmouseover="showTip(event, 'fs13', 19)" class="i">n</span><span class="o">&lt;</span><span class="n">1</span> <span class="k">then</span> <span class="n">1</span> <span class="k">else</span> <span onmouseout="hideTip(event, 'fs12', 20)" onmouseover="showTip(event, 'fs12', 20)" class="f">fib&#39;</span> (<span onmouseout="hideTip(event, 'fs13', 21)" onmouseover="showTip(event, 'fs13', 21)" class="i">n</span><span class="o">-</span><span class="n">1</span>) <span class="o">+</span> <span onmouseout="hideTip(event, 'fs12', 22)" onmouseover="showTip(event, 'fs12', 22)" class="f">fib&#39;</span> (<span onmouseout="hideTip(event, 'fs13', 23)" onmouseover="showTip(event, 'fs13', 23)" class="i">n</span><span class="o">-</span><span class="n">2</span>)
</code></pre></td>
</tr>
</table>
<p>Memoize gif by <a href="https://twitter.com/FSharpCasts">F# Casts</a>
<video controls="">
<source src="https://video.twimg.com/tweet_video/C4pJCWzUkAE-kQV.mp4" type="video/mp4">
Your browser does not support the video tag.
</source></video></p>
<table class="pre"><tr><td class="lines"><pre class="fssnip"><span class="l">1: </span>
<span class="l">2: </span>
<span class="l">3: </span>
<span class="l">4: </span>
<span class="l">5: </span>
<span class="l">6: </span>
<span class="l">7: </span>
<span class="l">8: </span>
</pre></td>
<td class="snippet"><pre class="fssnip highlighted"><code lang="fsharp"><span class="c">//-----------------------------------</span>
<span class="k">let</span> <span onmouseout="hideTip(event, 'fs14', 24)" onmouseover="showTip(event, 'fs14', 24)" class="f">memoizeRec</span> <span onmouseout="hideTip(event, 'fs15', 25)" onmouseover="showTip(event, 'fs15', 25)" class="f">f</span> <span class="o">=</span>
    <span class="k">let</span> <span onmouseout="hideTip(event, 'fs3', 26)" onmouseover="showTip(event, 'fs3', 26)" class="i">cache</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs4', 27)" onmouseover="showTip(event, 'fs4', 27)" class="i">System</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs5', 28)" onmouseover="showTip(event, 'fs5', 28)" class="i">Collections</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs6', 29)" onmouseover="showTip(event, 'fs6', 29)" class="i">Concurrent</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs7', 30)" onmouseover="showTip(event, 'fs7', 30)" class="t">ConcurrentDictionary</span><span class="o">&lt;</span>_, _<span class="o">&gt;</span>(<span onmouseout="hideTip(event, 'fs8', 31)" onmouseover="showTip(event, 'fs8', 31)" class="t">HashIdentity</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs9', 32)" onmouseover="showTip(event, 'fs9', 32)" class="i">Structural</span>)
    <span class="k">let</span> <span class="k">rec</span> <span onmouseout="hideTip(event, 'fs16', 33)" onmouseover="showTip(event, 'fs16', 33)" class="f">memF</span> <span onmouseout="hideTip(event, 'fs10', 34)" onmouseover="showTip(event, 'fs10', 34)" class="i">x</span> <span class="o">=</span> 
        <span onmouseout="hideTip(event, 'fs3', 35)" onmouseover="showTip(event, 'fs3', 35)" class="i">cache</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs11', 36)" onmouseover="showTip(event, 'fs11', 36)" class="f">GetOrAdd</span>(<span onmouseout="hideTip(event, 'fs10', 37)" onmouseover="showTip(event, 'fs10', 37)" class="i">x</span>, <span class="k">lazy</span> (<span onmouseout="hideTip(event, 'fs15', 38)" onmouseover="showTip(event, 'fs15', 38)" class="f">f</span> <span onmouseout="hideTip(event, 'fs16', 39)" onmouseover="showTip(event, 'fs16', 39)" class="f">memF</span> <span onmouseout="hideTip(event, 'fs10', 40)" onmouseover="showTip(event, 'fs10', 40)" class="i">x</span>))<span class="o">.</span><span class="f">Force</span>()
    <span onmouseout="hideTip(event, 'fs16', 41)" onmouseover="showTip(event, 'fs16', 41)" class="f">memF</span>
    
<span class="k">let</span> <span onmouseout="hideTip(event, 'fs17', 42)" onmouseover="showTip(event, 'fs17', 42)" class="f">fib</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs14', 43)" onmouseover="showTip(event, 'fs14', 43)" class="f">memoizeRec</span> <span class="o">&lt;|</span> <span class="k">fun</span> <span onmouseout="hideTip(event, 'fs18', 44)" onmouseover="showTip(event, 'fs18', 44)" class="f">f</span> <span onmouseout="hideTip(event, 'fs13', 45)" onmouseover="showTip(event, 'fs13', 45)" class="i">n</span> <span class="k">-&gt;</span> <span class="k">if</span> <span onmouseout="hideTip(event, 'fs13', 46)" onmouseover="showTip(event, 'fs13', 46)" class="i">n</span><span class="o">&lt;</span><span class="n">1</span> <span class="k">then</span> <span class="n">1</span> <span class="k">else</span> <span onmouseout="hideTip(event, 'fs18', 47)" onmouseover="showTip(event, 'fs18', 47)" class="f">f</span> (<span onmouseout="hideTip(event, 'fs13', 48)" onmouseover="showTip(event, 'fs13', 48)" class="i">n</span><span class="o">-</span><span class="n">1</span>) <span class="o">+</span> <span onmouseout="hideTip(event, 'fs18', 49)" onmouseover="showTip(event, 'fs18', 49)" class="f">f</span> (<span onmouseout="hideTip(event, 'fs13', 50)" onmouseover="showTip(event, 'fs13', 50)" class="i">n</span><span class="o">-</span><span class="n">2</span>)
</code></pre></td>
</tr>
</table>
<div class="tip" id="fs1">val memoize : f:(&#39;a -&gt; &#39;b) -&gt; (&#39;a -&gt; &#39;b) (requires equality)<br><br>Full name: MemoizeRec.memoize</div>
<div class="tip" id="fs2">val f : (&#39;a -&gt; &#39;b) (requires equality)</div>
<div class="tip" id="fs3">val cache : System.Collections.Concurrent.ConcurrentDictionary&lt;&#39;a,Lazy&lt;&#39;b&gt;&gt; (requires equality)</div>
<div class="tip" id="fs4">namespace System</div>
<div class="tip" id="fs5">namespace System.Collections</div>
<div class="tip" id="fs6">namespace System.Collections.Concurrent</div>
<div class="tip" id="fs7">Multiple items<br>type ConcurrentDictionary&lt;&#39;TKey,&#39;TValue&gt; =<br>&#160;&#160;new : unit -&gt; ConcurrentDictionary&lt;&#39;TKey, &#39;TValue&gt; + 6 overloads<br>&#160;&#160;member AddOrUpdate : key:&#39;TKey * addValueFactory:Func&lt;&#39;TKey, &#39;TValue&gt; * updateValueFactory:Func&lt;&#39;TKey, &#39;TValue, &#39;TValue&gt; -&gt; &#39;TValue + 1 overload<br>&#160;&#160;member Clear : unit -&gt; unit<br>&#160;&#160;member ContainsKey : key:&#39;TKey -&gt; bool<br>&#160;&#160;member Count : int<br>&#160;&#160;member GetEnumerator : unit -&gt; IEnumerator&lt;KeyValuePair&lt;&#39;TKey, &#39;TValue&gt;&gt;<br>&#160;&#160;member GetOrAdd : key:&#39;TKey * valueFactory:Func&lt;&#39;TKey, &#39;TValue&gt; -&gt; &#39;TValue + 1 overload<br>&#160;&#160;member IsEmpty : bool<br>&#160;&#160;member Item : &#39;TKey -&gt; &#39;TValue with get, set<br>&#160;&#160;member Keys : ICollection&lt;&#39;TKey&gt;<br>&#160;&#160;...<br><br>Full name: System.Collections.Concurrent.ConcurrentDictionary&lt;_,_&gt;<br><br>--------------------<br>System.Collections.Concurrent.ConcurrentDictionary() : unit<br>System.Collections.Concurrent.ConcurrentDictionary(collection: System.Collections.Generic.IEnumerable&lt;System.Collections.Generic.KeyValuePair&lt;&#39;TKey,&#39;TValue&gt;&gt;) : unit<br>System.Collections.Concurrent.ConcurrentDictionary(comparer: System.Collections.Generic.IEqualityComparer&lt;&#39;TKey&gt;) : unit<br>System.Collections.Concurrent.ConcurrentDictionary(concurrencyLevel: int, capacity: int) : unit<br>System.Collections.Concurrent.ConcurrentDictionary(collection: System.Collections.Generic.IEnumerable&lt;System.Collections.Generic.KeyValuePair&lt;&#39;TKey,&#39;TValue&gt;&gt;, comparer: System.Collections.Generic.IEqualityComparer&lt;&#39;TKey&gt;) : unit<br>System.Collections.Concurrent.ConcurrentDictionary(concurrencyLevel: int, collection: System.Collections.Generic.IEnumerable&lt;System.Collections.Generic.KeyValuePair&lt;&#39;TKey,&#39;TValue&gt;&gt;, comparer: System.Collections.Generic.IEqualityComparer&lt;&#39;TKey&gt;) : unit<br>System.Collections.Concurrent.ConcurrentDictionary(concurrencyLevel: int, capacity: int, comparer: System.Collections.Generic.IEqualityComparer&lt;&#39;TKey&gt;) : unit</div>
<div class="tip" id="fs8">module HashIdentity<br><br>from Microsoft.FSharp.Collections</div>
<div class="tip" id="fs9">val Structural&lt;&#39;T (requires equality)&gt; : System.Collections.Generic.IEqualityComparer&lt;&#39;T&gt; (requires equality)<br><br>Full name: Microsoft.FSharp.Collections.HashIdentity.Structural</div>
<div class="tip" id="fs10">val x : &#39;a (requires equality)</div>
<div class="tip" id="fs11">System.Collections.Concurrent.ConcurrentDictionary.GetOrAdd(key: &#39;a, value: Lazy&lt;&#39;b&gt;) : Lazy&lt;&#39;b&gt;<br>System.Collections.Concurrent.ConcurrentDictionary.GetOrAdd(key: &#39;a, valueFactory: System.Func&lt;&#39;a,Lazy&lt;&#39;b&gt;&gt;) : Lazy&lt;&#39;b&gt;</div>
<div class="tip" id="fs12">val fib&#39; : (int -&gt; int)<br><br>Full name: MemoizeRec.fib&#39;</div>
<div class="tip" id="fs13">val n : int</div>
<div class="tip" id="fs14">val memoizeRec : f:((&#39;a -&gt; &#39;b) -&gt; &#39;a -&gt; &#39;b) -&gt; (&#39;a -&gt; &#39;b) (requires equality)<br><br>Full name: MemoizeRec.memoizeRec</div>
<div class="tip" id="fs15">val f : ((&#39;a -&gt; &#39;b) -&gt; &#39;a -&gt; &#39;b) (requires equality)</div>
<div class="tip" id="fs16">val memF : (&#39;a -&gt; &#39;b) (requires equality)</div>
<div class="tip" id="fs17">val fib : (int -&gt; int)<br><br>Full name: MemoizeRec.fib</div>
<div class="tip" id="fs18">val f : (int -&gt; int)</div>


        </div><div class="post">
          <h1>FsPickler</h1>
<p>FsPickler can be used to "serialize" functions:</p>
<table class="pre"><tr><td class="lines"><pre class="fssnip"><span class="l">1: </span>
<span class="l">2: </span>
<span class="l">3: </span>
<span class="l">4: </span>
<span class="l">5: </span>
<span class="l">6: </span>
<span class="l">7: </span>
</pre></td>
<td class="snippet"><pre class="fssnip highlighted"><code lang="fsharp"><span class="k">open</span> <span class="i">MBrace</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs1', 1)" onmouseover="showTip(event, 'fs1', 1)" class="i">FsPickler</span>
<span class="k">open</span> <span class="i">MBrace</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs1', 2)" onmouseover="showTip(event, 'fs1', 2)" class="i">FsPickler</span><span class="o">.</span><span class="i">Json</span>

<span class="k">let</span> <span onmouseout="hideTip(event, 'fs2', 3)" onmouseover="showTip(event, 'fs2', 3)" class="i">s</span> <span class="o">=</span> <span class="i">FsPickler</span><span class="o">.</span><span class="i">CreateJsonSerializer</span>()
<span class="k">let</span> <span onmouseout="hideTip(event, 'fs3', 4)" onmouseover="showTip(event, 'fs3', 4)" class="i">pickle</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs2', 5)" onmouseover="showTip(event, 'fs2', 5)" class="i">s</span><span class="o">.</span><span class="i">PickleToString</span> (<span class="k">fun</span> <span class="i">x</span> <span class="k">-&gt;</span> <span class="i">x</span> <span class="o">+</span> <span class="n">1</span>)
<span class="k">let</span> <span onmouseout="hideTip(event, 'fs4', 6)" onmouseover="showTip(event, 'fs4', 6)" class="f">f</span><span class="o">:</span><span onmouseout="hideTip(event, 'fs5', 7)" onmouseover="showTip(event, 'fs5', 7)" class="t">int</span><span class="k">-&gt;</span><span onmouseout="hideTip(event, 'fs5', 8)" onmouseover="showTip(event, 'fs5', 8)" class="t">int</span> <span class="o">=</span> <span class="i">bs</span><span class="o">.</span><span class="i">UnPickleOfString</span> <span onmouseout="hideTip(event, 'fs3', 9)" onmouseover="showTip(event, 'fs3', 9)" class="i">pickle</span>
<span onmouseout="hideTip(event, 'fs4', 10)" onmouseover="showTip(event, 'fs4', 10)" class="f">f</span>(<span class="n">1</span>)
</code></pre></td>
</tr>
</table>
<div class="tip" id="fs1">module FsPickler</div>
<div class="tip" id="fs2">val s : obj<br><br>Full name: FsPickler.s</div>
<div class="tip" id="fs3">val pickle : obj<br><br>Full name: FsPickler.pickle</div>
<div class="tip" id="fs4">val f : (int -&gt; int)<br><br>Full name: FsPickler.f</div>
<div class="tip" id="fs5">Multiple items<br>val int : value:&#39;T -&gt; int (requires member op_Explicit)<br><br>Full name: Microsoft.FSharp.Core.Operators.int<br><br>--------------------<br>type int = int32<br><br>Full name: Microsoft.FSharp.Core.int<br><br>--------------------<br>type int&lt;&#39;Measure&gt; = int<br><br>Full name: Microsoft.FSharp.Core.int&lt;_&gt;</div>


        </div><div class="post">
          <h1>Memoize</h1>
<table class="pre"><tr><td class="lines"><pre class="fssnip"><span class="l">1: </span>
<span class="l">2: </span>
<span class="l">3: </span>
<span class="l">4: </span>
<span class="l">5: </span>
<span class="l">6: </span>
<span class="l">7: </span>
<span class="l">8: </span>
<span class="l">9: </span>
</pre></td>
<td class="snippet"><pre class="fssnip highlighted"><code lang="fsharp"><span class="k">let</span> <span onmouseout="hideTip(event, 'fs1', 1)" onmouseover="showTip(event, 'fs1', 1)" class="f">memoizeBy</span> (<span onmouseout="hideTip(event, 'fs2', 2)" onmouseover="showTip(event, 'fs2', 2)" class="f">f</span><span class="o">:</span> <span class="o">&#39;</span><span class="i">a</span> <span class="k">-&gt;</span> <span class="o">&#39;</span><span class="i">b</span>) (<span onmouseout="hideTip(event, 'fs3', 3)" onmouseover="showTip(event, 'fs3', 3)" class="f">g</span><span class="o">:</span> <span class="o">&#39;</span><span class="i">a</span> <span class="k">-&gt;</span> <span class="o">&#39;</span><span class="i">c</span>) <span class="o">=</span>
    <span class="k">let</span> <span onmouseout="hideTip(event, 'fs4', 4)" onmouseover="showTip(event, 'fs4', 4)" class="i">cache</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs5', 5)" onmouseover="showTip(event, 'fs5', 5)" class="i">System</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs6', 6)" onmouseover="showTip(event, 'fs6', 6)" class="i">Collections</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs7', 7)" onmouseover="showTip(event, 'fs7', 7)" class="i">Concurrent</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs8', 8)" onmouseover="showTip(event, 'fs8', 8)" class="t">ConcurrentDictionary</span><span class="o">&lt;</span>_, _<span class="o">&gt;</span>(<span onmouseout="hideTip(event, 'fs9', 9)" onmouseover="showTip(event, 'fs9', 9)" class="t">HashIdentity</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs10', 10)" onmouseover="showTip(event, 'fs10', 10)" class="i">Structural</span>)
    <span class="k">fun</span> <span onmouseout="hideTip(event, 'fs11', 11)" onmouseover="showTip(event, 'fs11', 11)" class="i">x</span> <span class="k">-&gt;</span>
        <span onmouseout="hideTip(event, 'fs4', 12)" onmouseover="showTip(event, 'fs4', 12)" class="i">cache</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs12', 13)" onmouseover="showTip(event, 'fs12', 13)" class="f">GetOrAdd</span>(<span onmouseout="hideTip(event, 'fs13', 14)" onmouseover="showTip(event, 'fs13', 14)" class="p">Some</span> (<span onmouseout="hideTip(event, 'fs3', 15)" onmouseover="showTip(event, 'fs3', 15)" class="f">g</span> <span onmouseout="hideTip(event, 'fs11', 16)" onmouseover="showTip(event, 'fs11', 16)" class="i">x</span>), <span class="k">lazy</span> (<span onmouseout="hideTip(event, 'fs2', 17)" onmouseover="showTip(event, 'fs2', 17)" class="f">f</span> <span onmouseout="hideTip(event, 'fs11', 18)" onmouseover="showTip(event, 'fs11', 18)" class="i">x</span>))<span class="o">.</span><span class="f">Force</span>()
        
<span class="k">let</span> <span class="k">inline</span> <span onmouseout="hideTip(event, 'fs14', 19)" onmouseover="showTip(event, 'fs14', 19)" class="f">memoize</span> <span onmouseout="hideTip(event, 'fs15', 20)" onmouseover="showTip(event, 'fs15', 20)" class="f">f</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs1', 21)" onmouseover="showTip(event, 'fs1', 21)" class="f">memoizeBy</span> <span onmouseout="hideTip(event, 'fs15', 22)" onmouseover="showTip(event, 'fs15', 22)" class="f">f</span> <span onmouseout="hideTip(event, 'fs16', 23)" onmouseover="showTip(event, 'fs16', 23)" class="f">id</span>
<span class="k">let</span> <span class="k">inline</span> <span onmouseout="hideTip(event, 'fs17', 24)" onmouseover="showTip(event, 'fs17', 24)" class="f">memoizeConst</span> <span onmouseout="hideTip(event, 'fs18', 25)" onmouseover="showTip(event, 'fs18', 25)" class="f">f</span> <span class="o">=</span>
    <span class="k">let</span> <span onmouseout="hideTip(event, 'fs19', 26)" onmouseover="showTip(event, 'fs19', 26)" class="f">g</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs14', 27)" onmouseover="showTip(event, 'fs14', 27)" class="f">memoize</span> (<span class="k">fun</span> _ <span class="k">-&gt;</span> <span onmouseout="hideTip(event, 'fs18', 28)" onmouseover="showTip(event, 'fs18', 28)" class="f">f</span>())
    <span class="k">fun</span> () <span class="k">-&gt;</span> <span onmouseout="hideTip(event, 'fs19', 29)" onmouseover="showTip(event, 'fs19', 29)" class="f">g</span> <span class="n">0</span>
</code></pre></td>
</tr>
</table>
<div class="tip" id="fs1">val memoizeBy : f:(&#39;a -&gt; &#39;b) -&gt; g:(&#39;a -&gt; &#39;c) -&gt; (&#39;a -&gt; &#39;b) (requires equality)<br><br>Full name: Memoize.memoizeBy</div>
<div class="tip" id="fs2">val f : (&#39;a -&gt; &#39;b)</div>
<div class="tip" id="fs3">val g : (&#39;a -&gt; &#39;c) (requires equality)</div>
<div class="tip" id="fs4">val cache : System.Collections.Concurrent.ConcurrentDictionary&lt;&#39;c option,Lazy&lt;&#39;b&gt;&gt; (requires equality)</div>
<div class="tip" id="fs5">namespace System</div>
<div class="tip" id="fs6">namespace System.Collections</div>
<div class="tip" id="fs7">namespace System.Collections.Concurrent</div>
<div class="tip" id="fs8">Multiple items<br>type ConcurrentDictionary&lt;&#39;TKey,&#39;TValue&gt; =<br>&#160;&#160;new : unit -&gt; ConcurrentDictionary&lt;&#39;TKey, &#39;TValue&gt; + 6 overloads<br>&#160;&#160;member AddOrUpdate : key:&#39;TKey * addValueFactory:Func&lt;&#39;TKey, &#39;TValue&gt; * updateValueFactory:Func&lt;&#39;TKey, &#39;TValue, &#39;TValue&gt; -&gt; &#39;TValue + 1 overload<br>&#160;&#160;member Clear : unit -&gt; unit<br>&#160;&#160;member ContainsKey : key:&#39;TKey -&gt; bool<br>&#160;&#160;member Count : int<br>&#160;&#160;member GetEnumerator : unit -&gt; IEnumerator&lt;KeyValuePair&lt;&#39;TKey, &#39;TValue&gt;&gt;<br>&#160;&#160;member GetOrAdd : key:&#39;TKey * valueFactory:Func&lt;&#39;TKey, &#39;TValue&gt; -&gt; &#39;TValue + 1 overload<br>&#160;&#160;member IsEmpty : bool<br>&#160;&#160;member Item : &#39;TKey -&gt; &#39;TValue with get, set<br>&#160;&#160;member Keys : ICollection&lt;&#39;TKey&gt;<br>&#160;&#160;...<br><br>Full name: System.Collections.Concurrent.ConcurrentDictionary&lt;_,_&gt;<br><br>--------------------<br>System.Collections.Concurrent.ConcurrentDictionary() : unit<br>System.Collections.Concurrent.ConcurrentDictionary(collection: System.Collections.Generic.IEnumerable&lt;System.Collections.Generic.KeyValuePair&lt;&#39;TKey,&#39;TValue&gt;&gt;) : unit<br>System.Collections.Concurrent.ConcurrentDictionary(comparer: System.Collections.Generic.IEqualityComparer&lt;&#39;TKey&gt;) : unit<br>System.Collections.Concurrent.ConcurrentDictionary(concurrencyLevel: int, capacity: int) : unit<br>System.Collections.Concurrent.ConcurrentDictionary(collection: System.Collections.Generic.IEnumerable&lt;System.Collections.Generic.KeyValuePair&lt;&#39;TKey,&#39;TValue&gt;&gt;, comparer: System.Collections.Generic.IEqualityComparer&lt;&#39;TKey&gt;) : unit<br>System.Collections.Concurrent.ConcurrentDictionary(concurrencyLevel: int, collection: System.Collections.Generic.IEnumerable&lt;System.Collections.Generic.KeyValuePair&lt;&#39;TKey,&#39;TValue&gt;&gt;, comparer: System.Collections.Generic.IEqualityComparer&lt;&#39;TKey&gt;) : unit<br>System.Collections.Concurrent.ConcurrentDictionary(concurrencyLevel: int, capacity: int, comparer: System.Collections.Generic.IEqualityComparer&lt;&#39;TKey&gt;) : unit</div>
<div class="tip" id="fs9">module HashIdentity<br><br>from Microsoft.FSharp.Collections</div>
<div class="tip" id="fs10">val Structural&lt;&#39;T (requires equality)&gt; : System.Collections.Generic.IEqualityComparer&lt;&#39;T&gt; (requires equality)<br><br>Full name: Microsoft.FSharp.Collections.HashIdentity.Structural</div>
<div class="tip" id="fs11">val x : &#39;a</div>
<div class="tip" id="fs12">System.Collections.Concurrent.ConcurrentDictionary.GetOrAdd(key: &#39;c option, value: Lazy&lt;&#39;b&gt;) : Lazy&lt;&#39;b&gt;<br>System.Collections.Concurrent.ConcurrentDictionary.GetOrAdd(key: &#39;c option, valueFactory: System.Func&lt;&#39;c option,Lazy&lt;&#39;b&gt;&gt;) : Lazy&lt;&#39;b&gt;</div>
<div class="tip" id="fs13">union case Option.Some: Value: &#39;T -&gt; Option&lt;&#39;T&gt;</div>
<div class="tip" id="fs14">val memoize : f:(&#39;a -&gt; &#39;b) -&gt; (&#39;a -&gt; &#39;b) (requires equality)<br><br>Full name: Memoize.memoize</div>
<div class="tip" id="fs15">val f : (&#39;a -&gt; &#39;b) (requires equality)</div>
<div class="tip" id="fs16">val id : x:&#39;T -&gt; &#39;T<br><br>Full name: Microsoft.FSharp.Core.Operators.id</div>
<div class="tip" id="fs17">val memoizeConst : f:(unit -&gt; &#39;a) -&gt; (unit -&gt; &#39;a)<br><br>Full name: Memoize.memoizeConst</div>
<div class="tip" id="fs18">val f : (unit -&gt; &#39;a)</div>
<div class="tip" id="fs19">val g : (int -&gt; &#39;a)</div>


        </div>
      </div>
    </div>
    <script>
  <!-- your google analytics code here -->

</script>
  </body>
</html>
